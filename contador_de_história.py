# -*- coding: utf-8 -*-
"""Contador de hist√≥ria.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MF5vFRTqerVZwa7xjQ9EHbmUm1deZ9Di
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

# Configura a API Key do Google Gemini

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings
from PIL import Image
from io import BytesIO
import base64
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

from typing import Optional

def generate_media_image(image_description: str) -> Optional[Image.Image]:
    """
    Gera uma imagem para redes sociais usando o modelo Gemini com a descri√ß√£o fornecida.

    Args:
        image_description: A descri√ß√£o textual da imagem a ser gerada para o post.

    Returns:
        Um objeto PIL Image da imagem gerada ou None em caso de erro.
    """
    try:
        image_prompt = f"Crie uma imagem vibrante e criativa para realcionada a hist√≥ria: '{image_description}'."
        response = client.models.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=image_prompt,
            config=types.GenerateContentConfig(
            response_modalities=['TEXT', 'IMAGE']
            )
        )

        for part in response.candidates[0].content.parts:
          if part.text is not None:
            print(part.text)
          elif part.inline_data is not None:
            image = Image.open(BytesIO((part.inline_data.data)))
            image.save('gemini-native-image.png')
            image.show()

    except Exception as e:
        print(f"Ocorreu um erro ao gerar a imagem: {e}")
        return None

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Criador de hist√≥rias --- #
##########################################
def agente_criador(personagem):

    criador = Agent(
        name="agente_criador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um escritor de hist√≥rias infantis. Crie hist√≥rias bem curtas a partir do personagem informado que sempre termine com uma situa√ß√£o engra√ßada.
        """,
        description="Criador de hist√≥rias infantis",
    )

    entrada_do_agente_criador = f"T√≥pico: {personagem}\n"

    historia = call_agent(criador, entrada_do_agente_criador)
    return historia

##########################################
# --- Agente 5: Criador de Imagem --- #
##########################################

def agente_criador_imagem(personagem, historia):
    criador = Agent(
        name="agente_criador_imagem",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um Criador de Imagens para Redes Sociais, especializado em gerar
            visuais impactantes para posts de Instagram. Com base no texto do post
            revisado fornecido, crie uma descri√ß√£o detalhada da imagem ideal para
            complementar o conte√∫do. Retorne apenas a descri√ß√£o da imagem que ser√° usada
            no modelo do Gemini para criar uma imagem.
            """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_do_agente_criador = f"Personagem: {personagem}\Hist√≥ria: {historia}"
    # Executa o agente
    descricao_imagem = call_agent(criador, entrada_do_agente_criador)
    return descricao_imagem

def generate_media_image(image_description: str) -> Optional[Image.Image]:
    """
    Gera uma imagem para redes sociais usando o modelo Gemini com a descri√ß√£o fornecida.

    Args:
        image_description: A descri√ß√£o textual da imagem a ser gerada para o post.

    Returns:
        Um objeto PIL Image da imagem gerada ou None em caso de erro.
    """
    try:
        image_prompt = f"Crie uma imagem vibrante e criativa para realcionada a hist√≥ria: '{image_description}'."
        response = client.models.generate_content(
            model="gemini-2.0-flash-preview-image-generation",
            contents=image_prompt,
            config=types.GenerateContentConfig(
            response_modalities=['TEXT', 'IMAGE']
            )
        )

        generated_image_obj = None # Inicializa a vari√°vel para armazenar o objeto da imagem

        for part in response.candidates[0].content.parts:
          if part.text is not None:
            print(part.text)
          elif part.inline_data is not None:
            image = Image.open(BytesIO((part.inline_data.data)))
            image.save('gemini-native-image.png')
            generated_image_obj = image # Armazena o objeto da imagem
            print("Imagem salva como 'gemini-native-image.png'") # Confirma que a imagem foi salva
            # image.show() # Desativei para evitar a janela separada, o display do matplotlib √© melhor no Colab


        return generated_image_obj # Retorna o objeto da imagem

    except Exception as e:
        print(f"Ocorreu um erro ao gerar a imagem: {e}")
        return None

print("üöÄ Iniciando o criador de hist√≥rias infantis!")

# --- Obter o T√≥pico do Usu√°rio ---
personagem = input("‚ùì De qual personagem gostaria de ter uma hist√≥ria? Pode ser um animal, um objeto ou uma pessoa: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not personagem:
    print("Voc√™ esqueceu de digitar o personagem!")
else:
    print(f"Maravilha! Vamos ent√£o criar uma hist√≥ria de {personagem}")

    # Chame agente_criador para gerar a hist√≥ria primeiro
    historia = agente_criador(personagem)

    descricao_imagem = agente_criador_imagem(personagem, historia)

    # Note: The function generate_social_media_image is not defined in the provided code.
    # Assuming the user meant to call generate_media_image
    generated_image = generate_media_image(descricao_imagem)

    # Check if an image was successfully generated before attempting to display it
    if generated_image:
        img = mpimg.imread('gemini-native-image.png')
        plt.imshow(img)
        plt.axis('off')
        plt.show()

    # Call agente_revisor after the story is generated
    # Note: The function agente_revisor is not defined in the provided code.
    # This line may cause a NameError if agente_revisor is not defined elsewhere.
    # If agente_revisor is intended to be used, ensure it is defined.
    # For the purpose of fixing the 'historia' NameError, we assume agente_revisor will be defined.
    # historia = agente_revisor(personagem, historia) # Uncomment if agente_revisor is defined
    # Assuming historia is the final text to be displayed. If agente_revisor modifies it,
    # the display should use the variable after the call to agente_revisor.
    display(to_markdown(historia))